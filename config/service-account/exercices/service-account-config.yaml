# Cet exemple est spécialement conçu pour fonctionner dans un environnement Minikube.
# Il configure un namespace, un serviceaccount avec les droits RBAC appropriés,
# ainsi qu’un Pod qui utilise ce serviceaccount pour interroger l’API Kubernetes.

apiVersion: v1
kind: Namespace
metadata:
  name: custom-namespace
# Namespace : isole les ressources Kubernetes dans un espace logique dédié,
# permettant la gestion séparée et la limitation des accès.

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: custom-sa
  namespace: custom-namespace
# ServiceAccount : identité machine utilisée par les Pods pour s'authentifier auprès du Kubernetes API.
# Il fournit un jeton sécurisé monté dans les Pods pour les appels API.

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-reader-and-token-reviewer
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["authentication.k8s.io"]
    resources: ["tokenreviews"]
    verbs: ["create"]
# ClusterRole : définit un ensemble global de permissions à l’échelle du cluster.
# Ici, permet de lire les Pods dans tous les namespaces et de valider les tokens (tokenreviews)
# ce qui est nécessaire pour l’authentification via les ServiceAccounts.

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: custom-sa-pod-reader-binding
subjects:
  - kind: ServiceAccount
    name: custom-sa
    namespace: custom-namespace
roleRef:
  kind: ClusterRole
  name: pod-reader-and-token-reviewer
  apiGroup: rbac.authorization.k8s.io
# ClusterRoleBinding : lie le ClusterRole (permissions) au ServiceAccount défini,
# lui octroyant ces permissions à l’échelle du cluster.

---
apiVersion: v1
kind: Pod
metadata:
  name: pod-listing-pod
  namespace: custom-namespace
spec:
  serviceAccountName: custom-sa
  containers:
    - name: pod-listing-container
      image: curlimages/curl
      command:
        - /bin/sh
        - -c
        - |
          # Récupère le token monté automatiquement par Kubernetes via le ServiceAccount
          TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
          echo "Jeton récupéré : $TOKEN"
          echo "Récupération de la liste des Pods..."
          # Fait une requête HTTP sécurisée à l’API Kubernetes pour lister les Pods dans le cluster
          curl -k -H "Authorization: Bearer $TOKEN" https://kubernetes.default.svc/api/v1/pods
          # Garde le Pod actif pour consulter les logs
          sleep 3600
# Pod : unité d’exécution dans Kubernetes. Ici, il utilise le ServiceAccount pour s’authentifier
# et interroger l’API Kubernetes, démontrant l’usage pratique du ServiceAccount avec RBAC.
