# -------------------------------
# üß© 1. Namespace : Isolation logique
# -------------------------------
# Tous les objets (pods, services, ingress...) seront cr√©√©s
# dans le namespace "web-apps" pour √©viter les conflits avec d'autres projets.
apiVersion: v1
kind: Namespace
metadata:
  name: web-apps

---

# -------------------------------
# ‚öôÔ∏è 2. ConfigMap : Configuration du contr√¥leur Ingress NGINX
# -------------------------------
# Ce ConfigMap est r√©f√©renc√© par le contr√¥leur NGINX.
# Il peut contenir des param√®tres comme les timeouts, les logs, la taille max de requ√™tes, etc.
# (Ici, il est vide, donc la configuration par d√©faut de NGINX s‚Äôapplique.)
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-nginx-config
  namespace: web-apps
data: {}

---

# -------------------------------
# üß≠ 3. IngressClass : Type d'Ingress pris en charge
# -------------------------------
# D√©clare que le contr√¥leur "ingress-nginx" est celui qui g√©rera
# les ressources Ingress de type "ingress-nginx-class".
# Cela √©vite les conflits si plusieurs contr√¥leurs Ingress existent dans le cluster.
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: ingress-nginx-class
spec:
  controller: k8s.io/ingress-nginx

---

# -------------------------------
# üë§ 4. ServiceAccount : Identit√© du contr√¥leur Ingress
# -------------------------------
# Le contr√¥leur Ingress NGINX utilise ce compte de service
# pour s‚Äôauthentifier aupr√®s de l‚ÄôAPI Kubernetes et regarder les ressources (Ingress, Services...).
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-ingress-nginx-controller
  namespace: web-apps

---

# -------------------------------
# üîê 5. ClusterRole : Autorisations globales pour le contr√¥leur
# -------------------------------
# D√©finit les permissions dont le contr√¥leur a besoin pour fonctionner :
# - Lire les Services, Pods, Endpoints...
# - Observer les Ingress pour configurer NGINX dynamiquement
# - Cr√©er des √©v√©nements, g√©rer les leases (√©lection de leader)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cr-ingress-nginx-controller
rules:
  - apiGroups: [""]
    resources: ["configmaps", "endpoints", "endpointslices", "nodes", "pods", "secrets", "services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["discovery.k8s.io"]
    resources: ["endpointslices"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses", "ingressclasses", "ingresses/status"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]

---

# -------------------------------
# üîó 6. ClusterRoleBinding : Liaison entre ServiceAccount et ClusterRole
# -------------------------------
# Relie le ServiceAccount (identit√© du contr√¥leur)
# au ClusterRole (permissions globales).
# ‚ûú Cela permet au pod du contr√¥leur NGINX de lire les ressources du cluster.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: crb-ingress-nginx-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cr-ingress-nginx-controller
subjects:
  - kind: ServiceAccount
    name: sa-ingress-nginx-controller
    namespace: web-apps

---

# -------------------------------
# üöÄ 7. Deployment : Contr√¥leur Ingress NGINX
# -------------------------------
# C‚Äôest le composant central qui agit comme un reverse proxy.
# Il observe les objets Ingress dans le cluster et configure automatiquement NGINX.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-ingress-nginx-controller
  namespace: web-apps
  labels:
    app: ingress-nginx-controller
spec:
  replicas: 1  # Une seule instance suffit pour un petit cluster (sinon H/A possible)
  selector:
    matchLabels:
      app: ingress-nginx-controller
  template:
    metadata:
      labels:
        app: ingress-nginx-controller
    spec:
      serviceAccountName: sa-ingress-nginx-controller
      containers:
        - name: nginx-controller
          image: registry.k8s.io/ingress-nginx/controller:v1.9.0
          args:
            # Arguments de d√©marrage du contr√¥leur :
            # - lie le service exposant NGINX
            # - configure le leader election
            # - associe la classe d‚Äôingress
            - /nginx-ingress-controller
            - --publish-service=$(POD_NAMESPACE)/svc-ingress-nginx-controller
            - --election-id=ingress-controller-leader
            - --controller-class=k8s.io/ingress-nginx
            - --ingress-class=ingress-nginx-class
            - --configmap=$(POD_NAMESPACE)/ingress-nginx-config
          env:
            # Variables d‚Äôenvironnement inject√©es automatiquement
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          # Probes pour surveiller la sant√© du contr√¥leur
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
          securityContext:
            runAsUser: 101
            allowPrivilegeEscalation: false

---

# -------------------------------
# üåê 8. Service : Exposition du contr√¥leur NGINX
# -------------------------------
# Ce service de type NodePort rend NGINX accessible depuis les n≈ìuds du cluster.
# C‚Äôest la porte d‚Äôentr√©e vers les applications web (Ingress les dirige ensuite vers RED/BLUE).
apiVersion: v1
kind: Service
metadata:
  name: svc-ingress-nginx-controller
  namespace: web-apps
spec:
  type: NodePort  # (ClusterIP en interne, NodePort pour acc√®s externe)
  selector:
    app: ingress-nginx-controller
  ports:
    - name: http
      port: 80
      targetPort: 80
    - name: https
      port: 443
      targetPort: 443

---

# -------------------------------
# üî¥ 9. Deployment : Application "RED"
# -------------------------------
# Petit serveur NGINX qui affiche "RED APP"
# Il sera expos√© via un Service et rout√© par l‚ÄôIngress.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-web-red
  namespace: web-apps
  labels:
    app: web-red
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-red
  template:
    metadata:
      labels:
        app: web-red
    spec:
      containers:
        - name: nginx-web-red
          image: nginx:latest
          ports:
            - containerPort: 80
          command: ["/bin/sh", "-c"]
          args:
            # On remplace la page d'accueil NGINX par "RED APP"
            - echo "<h1>RED APP</h1>" > /usr/share/nginx/html/index.html && nginx -g 'daemon off;'

---

# -------------------------------
# üîµ 10. Deployment : Application "BLUE"
# -------------------------------
# M√™me principe que "RED", mais affiche "BLUE APP".
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-web-blue
  namespace: web-apps
  labels:
    app: web-blue
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-blue
  template:
    metadata:
      labels:
        app: web-blue
    spec:
      containers:
        - name: nginx-web-blue
          image: nginx:latest
          ports:
            - containerPort: 80
          command: ["/bin/sh", "-c"]
          args:
            - echo "<h1>BLUE APP</h1>" > /usr/share/nginx/html/index.html && nginx -g 'daemon off;'

---

# -------------------------------
# üß© 11. Service : Expose le pod RED
# -------------------------------
# Lie le Service √† l'application via le label `app: web-red`.
# L‚ÄôIngress utilisera ce service comme backend pour /red.
apiVersion: v1
kind: Service
metadata:
  name: svc-web-red
  namespace: web-apps
spec:
  selector:
    app: web-red
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---

# -------------------------------
# üß© 12. Service : Expose le pod BLUE
# -------------------------------
# Lie le Service √† l'application via le label `app: web-blue`.
# L‚ÄôIngress utilisera ce service comme backend pour /blue.
apiVersion: v1
kind: Service
metadata:
  name: svc-web-blue
  namespace: web-apps
spec:
  selector:
    app: web-blue
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---

# -------------------------------
# üö¶ 13. Ingress : Routage HTTP
# -------------------------------
# L‚Äôobjet cl√© qui connecte tout :
# - Il observe les requ√™tes HTTP entrantes sur le contr√¥leur NGINX
# - Et redirige vers le bon Service selon le chemin (/red ou /blue)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-web-apps
  namespace: web-apps
  annotations:
    # Permet de r√©√©crire le chemin d‚Äôacc√®s pour que l‚Äôapp re√ßoive la requ√™te correcte.
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: ingress-nginx-class  # Correspond √† l‚ÄôIngressClass plus haut
  rules:
    - http:
        paths:
          # Toute requ√™te vers /red ou /red/xxx ‚Üí envoie au service RED
          - path: /red(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: svc-web-red
                port:
                  number: 80
          # Toute requ√™te vers /blue ou /blue/xxx ‚Üí envoie au service BLUE
          - path: /blue(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: svc-web-blue
                port:
                  number: 80
